pipelines: 
#Build NPM app
  - name: npm_app_pipeline
    steps:    
      - name: bash_npm_build_publish
        type: Bash
        configuration: 
          environmentVariables: 
            buildName: bash_npm_build_publish
            buildNumber: "1.0.${run_number}"
          runtime:
            type: host
          integrations: 
            - name: artifactory
            - name: pegeneric
          inputResources:
            - name: pe_source_code
          outputResources: 
            - name: npm_app_build_info
        execution: 
          onExecute: 
            - printenv int_pegeneric_user
            - printenv int_pegeneric_password
            - printenv int_pegeneric_server
            - git clone https://github.com/davidpinhas/simple-express-app.git
            - cd simple-express-app
            - bash artifactory-config.sh
            - jfrog rt npm-config --server-id-resolve $int_pegeneric_server --server-id-deploy $int_pegeneric_server --repo-resolve pe-npm-remote --repo-deploy pe-npm-local
            - jfrog rt npmi --build-name=npm-app --build-number=1.0.${run_number}
            - jfrog rt bag npm-app 1.0.${run_number}
            - jfrog rt bce npm-app 1.0.${run_number}
            - jfrog rt bp npm-app 1.0.${run_number}
            - add_run_variables buildName=${JFROG_CLI_BUILD_NAME} buildNumber=${JFROG_CLI_BUILD_NUMBER}
            - add_run_variables myEnvironmentVariable=${run_id}
            - $jfrog_cli_path rt build-collect-env
            - add_run_files /tmp/jfrog/. jfrog

      - name: npm_publish_buildinfo
        type: PublishBuildInfo
        configuration:
          environmentVariables:
            buildStepName: bash_npm_build_publish
          inputSteps:
            - name: bash_npm_build_publish
          runtime:
            type: host
          outputResources:
            - name: npm_app_build_info

      - name: npm_app_scan
        type: XrayScan
        configuration:
          failOnScan: false
          inputSteps:
            - name: npm_publish_buildinfo
          inputResources:
            - name: npm_app_build_info

      - name: promoteNpmBuildStep
        type: PromoteBuild
        configuration:
          targetRepository: pe-prod-npm
          includeDependencies: true
          copy: true
          integrations:
            - name: artifactory
          inputResources:
            - name: npm_app_build_info
              trigger: true
          outputResources:
            - name: npm_app_build_info_propoted_prod
        execution:
          onSuccess:
            - write_output npm_app_build_info_propoted_prod version=${appVersion}
            - jfrog rt sp --build=${res_npm_app_build_info_buildName}/${res_npm_app_build_info_buildNumber} pe-npm-local/ "app.version=${appVersion}"

#Dockerized app
  - name: dockerized_npm_app_pipeline
    configuration:
      environmentVariables:
        readOnly:
          dockerImageTagVersion: 1.0.${run_number}

    steps:
      - name: build_docker_npm_app
        type: DockerBuild
        configuration:
          affinityGroup: docker_group
          dockerFileName: Dockerfile
          dockerFileLocation: .
          dockerImageName: ${int_server_name_value}.jfrog.io/npm-app
          dockerImageTag: ${dockerImageTagVersion}
          dockerOptions: --build-arg SERVER_NAME=${int_server_name_value} --build-arg DOCKER_FRAMEWORK_VERSION=${dockerFrameworkVersion}
          inputResources:
            - name: pe_source_code
              trigger: false
            - name: npm_app_build_info_propoted_prod
              trigger: true
          integrations:
            - name: artifactory
            - name: docker
            - name: server_name
        execution:
          onStart:
            - add_pipeline_variables appVersion="${res_build_info_npm_app_promoted_staging_version}"
            - add_pipeline_variables triggerBuildInfoName="${res_build_info_npm_app_promoted_staging_buildName}"
            - add_pipeline_variables triggerBuildInfoNumber="${res_build_info_npm_app_promoted_staging_buildNumber}"
            - add_pipeline_variables myDockerTag="${dockerImageTagVersion}"

      - name: publish_docker_npm_app
        type: DockerPush
        configuration:
          affinityGroup: docker_group
          targetRepository: pe-docker-local
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_docker_npm_app
          integrations:
            - name: artifactory
          outputResources:
            - name: docker_app_build_info
            - name: docker_app_image2

      - name: xray_scan_docker_build_info_npm_app
        type: XrayScan
        configuration:
          affinityGroup: docker_group
          failOnScan: true
          inputSteps:
            - name: publish_docker_npm_app
          inputResources:
            - name: docker_app_build_info

      - name: promoting_docker_build_info_app
        type: PromoteBuild
        configuration:
          affinityGroup: docker_group
          targetRepository: pe-docker-local
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: "True"
          integrations:
            - name: artifactory
          inputResources:
            - name: docker_app_build_info
              trigger: true
          inputSteps:
            - name: xray_scan_docker_build_info_npm_app
          outputResources:
            - name: docker_app_build_info_promoted_prod
        execution:
          onSuccess:
            - write_output docker_app_build_info_promoted_prod "backimage=\"backapp\""
            - write_output docker_app_build_info_promoted_prod "backtag=${dockerImageTagVersion}"
            - jfrog rt sp --build=${res_docker_app_build_info_buildName}/${res_docker_app_build_info_buildNumber} pe-docker-local/**/manifest.json "docker.tag=${dockerImageTagVersion}"

      - name: publish_helm_chart
        type: HelmPublish
        configuration:
          helmVersion: 3
          lint: true
          chartPath: "./npm-app-chart"
          inputResources:
            - name: pe_source_code
              trigger: false
          inputSteps:
            - name: promoting_docker_build_info_app
          outputResources:
            - name: helm_chart_npm_app_resource
          flags: --app-version=${dockerImageTagVersion} --version 1.0.${run_number}
        execution:
          onStart:
            - CHART_VERSION=0.0.$run_number
            - pushd $res_pe_source_code_resourcePath/npm-app-chart
            - "bash helm-docker-tag.sh"
            - "sed -ie \"s/^version: .*$/version: $CHART_VERSION/\" Chart.yaml"
            - "sed -ie \"s/^appVersion: .*$/appVersion: $CHART_VERSION/\" Chart.yaml"
            - "cat values.yaml"
            - popd

      - name: helm_deploy
        type: Bash
        configuration:
          environmentVariables:
            DESIRED_VERSION: v3.2.1
          inputSteps:
            - name: publish_helm_chart
          integrations:
            - name: pegeneric
            - name: davidp_gcp_k8s
          inputResources:
            - name: helm_chart_npm_app_resource
        execution:
          onStart:
            - curl -LO https://git.io/get_helm.sh
            - chmod 700 get_helm.sh
            - ./get_helm.sh
            - curl -LO https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl
            - chmod 700 kubectl
          onExecute:
            - printenv int_pegeneric_k8s_project
            - printenv int_pegeneric_user
            - printenv int_pegeneric_password
            - printenv int_pegeneric_server
            - helm repo add pe-helm https://$int_pegeneric_server.jfrog.io/artifactory/api/helm/pe-helm --username $int_pegeneric_user --password $int_pegeneric_password
            - helm repo update
            - gcloud container clusters get-credentials vfrog-webapp-cluster --zone europe-west1-b --project $int_pegeneric_k8s_project
            - helm upgrade --install vfrog-webapp --namespace vfrog-npm-app --create-namespace pe-helm/npm-app-chart